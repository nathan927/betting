# ===================================================
# GENERAL APPLICATION CONFIGURATION
# ===================================================
NODE_ENV=development # Environment (development, staging, production)
LOG_LEVEL=info # Logging level (error, warn, info, http, verbose, debug, silly)
TZ=UTC # Timezone

# ===================================================
# FRONTEND CONFIGURATION (Build-time variables)
# ===================================================
# Note: These NEXT_PUBLIC_ variables are typically set at build time for Next.js
NEXT_PUBLIC_API_URL=http://localhost:3000/api/v1
NEXT_PUBLIC_ODDS_WS_URL=ws://localhost:8080/ws/live-odds # For Live Odds Panel
# NEXT_PUBLIC_GOOGLE_ANALYTICS_ID=UA-XXXXXXXXX-X

# ===================================================
# BACKEND API GATEWAY CONFIGURATION
# ===================================================
PORT=3000 # Main port for the API Gateway
WS_PORT=8080 # WebSocket port for the API Gateway
ALLOWED_ORIGINS=http://localhost:3001,http://localhost:8000 # Frontend URL for CORS (Next.js default is 3000, but often served on 3001 in dev for backend on 3000)

# ===================================================
# DATABASE (PostgreSQL with TimescaleDB)
# ===================================================
DB_HOST=localhost
DB_PORT=5432
DB_USER=betting_user
DB_PASSWORD=your_secure_db_password
DB_NAME=betting_db
# DB_SSL_REJECT_UNAUTHORIZED=false # Set to true in production with valid CA

# ===================================================
# REDIS CACHE & MESSAGE BROKER
# ===================================================
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=your_secure_redis_password
# REDIS_USE_TLS=false

# ===================================================
# KAFKA MESSAGE QUEUE
# ===================================================
KAFKA_BROKERS=localhost:9092 # Comma-separated list if multiple brokers
# KAFKA_CLIENT_ID=bettingSystemApi
# KAFKA_GROUP_ID_ODDS=oddsConsumerGroup
# KAFKA_GROUP_ID_BETS=betsConsumerGroup

# ===================================================
# SECURITY & AUTHENTICATION
# ===================================================
JWT_SECRET=your_super_strong_jwt_secret_key_at_least_32_characters_long
JWT_REFRESH_SECRET=your_even_stronger_jwt_refresh_secret_key_at_least_32_characters_long
JWT_ACCESS_TOKEN_EXPIRATION=15m # e.g., 15 minutes
JWT_REFRESH_TOKEN_EXPIRATION=7d # e.g., 7 days
ENCRYPTION_KEY=a_32_byte_long_hex_encoded_strong_encryption_key_for_data_at_rest # Must be 32 bytes (256 bits) for AES-256

# ===================================================
# ML MODEL SERVICES CONFIGURATION
# ===================================================
PYTHON_ENV=development # Or production for ML services
MODEL_PATH=/app/models # Default path within ML service containers

# ML Service Endpoints (if backend needs to call them directly)
# These are the ports the ML services' Flask/Gunicorn apps listen on
HORSE_RACING_ML_PORT=5002
FOOTBALL_ML_PORT=5001
# HORSE_RACING_ML_API_URL=http://ml-horse-racing:5002/predict/horse-racing # Example internal Docker URL
# FOOTBALL_ML_API_URL=http://ml-football:5001/predict # Example internal Docker URL

# ===================================================
# SCRAPER SERVICE CONFIGURATION
# ===================================================
HEADLESS_BROWSER=true # For Playwright in scraper (true/false)
# SCRAPER_TARGET_URL_HORSE_RACING=https://example.com/horse-racing-odds
# SCRAPER_TARGET_URL_FOOTBALL=https://example.com/football-odds
PROXY_LIST_PATH=proxies.txt # Path to proxy list file if used by scraper
# PLAYWRIGHT_BROWSER_TYPE=chromium # chromium, firefox, webkit

# ===================================================
# MONITORING & ALERTING SERVICE
# ===================================================
METRICS_PORT=9090 # Port for Prometheus metrics endpoint if exposed by monitoring service

# Email Notifications
SMTP_HOST=smtp.example.com
SMTP_PORT=587
SMTP_USER=your_email_username
SMTP_PASS=your_email_password
SMTP_SECURE=false # Use true for SSL/TLS, false for STARTTLS (often on port 587)
ALERT_EMAIL_FROM="Betting System Alerts <alerts@yourdomain.com>"
ALERT_EMAIL_TO=alerts_recipient@example.com

# Slack Notifications
SLACK_API_TOKEN=xoxb-your-slack-bot-token
SLACK_ALERT_CHANNEL=#betting-alerts # Channel ID or name

# Webhook Notifications
ALERT_WEBHOOK_URL=https://your-webhook-endpoint.com/alerts

# ===================================================
# EXTERNAL API KEYS
# ===================================================
# Ensure these are kept secure and not hardcoded in production.
# FOOTBALL_DATA_ORG_API_KEY=
# SPORTMONKS_API_KEY=
# PINNACLE_API_KEY=
# OTHER_DATA_PROVIDER_API_KEY=

# ===================================================
# DOCKER COMPOSE SPECIFIC (Passwords for services in docker-compose)
# ===================================================
# These are often set via docker-compose secrets or direct environment in compose file
# POSTGRES_PASSWORD=your_secure_db_password # Matches DB_PASSWORD if same user
# TIMESCALEDB_TELEMETRY=off
# GF_SECURITY_ADMIN_USER=admin
# GF_SECURITY_ADMIN_PASSWORD=your_grafana_admin_password
# ZOOKEEPER_CLIENT_PORT=2181
# KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092

# Note: For actual deployment, use a .env file (ignored by git) and secure methods for secrets.
# This .env.example file is for guidance and local development setup.
# Ensure sensitive defaults are changed for any real deployment.
# Variables specific to services within Docker (like service names for inter-service communication)
# are often best handled directly in docker-compose.yml or Kubernetes configs.
```
